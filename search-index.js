var N=null,E="",T="t",U="u",searchIndex={};
var R=["result","Deserializer","A deserializer that reads bytes from a buffer.","Deserializes a slice of bytes into an object.","Deserializes an object directly from a `Read`.","Serializer","A serializer that writes values into a buffer.","Bounded","A `SizeLimit` that restricts serialized or deserialized…","Infinite","A `SizeLimit` without a limit.","Given a maximum size limit, check how large an object…","SizeLimit","Limits on the number of bytes that can be read or written.","to_owned","clone_into","try_from","try_into","borrow_mut","type_id","cdr::ser","cdr::size","borrow","typeid","ordering","partial_cmp","option","bigendian","littleendian","formatter","read_u16","read_u32","read_u64","read_u128","read_uint","read_uint128","write_u16","write_u32","write_u64","write_u128","write_uint","write_uint128","read_u16_into","read_u32_into","read_u64_into","read_u128_into","write_u16_into","write_u32_into","write_u64_into","write_u128_into","from_slice_u16","from_slice_u32","from_slice_u64","from_slice_u128","from_slice_f32","from_slice_f64","cdr::de","bounded","infinite","Encapsulation","BigEndian","LittleEndian"];

searchIndex["cdr"]={"doc":"A serialization/deserialization implementation for Common…","i":[[4,R[60],"cdr","Defines big-endian serialization.",N,N],[4,R[61],E,"Defines little-endian serialization.",N,N],[3,R[1],E,R[2],N,N],[3,R[5],E,R[6],N,N],[3,R[7],E,R[8],N,N],[12,"0",E,E,0,N],[3,R[9],E,R[10],N,N],[4,"CdrBe",E,"OMG CDR big-endian encapsulation.",N,N],[4,"CdrLe",E,"OMG CDR little-endian encapsulation.",N,N],[4,"PlCdrBe",E,"ParameterList encapsulated using OMG CDR big-endian…",N,N],[4,"PlCdrLe",E,"ParameterList encapsulated using OMG CDR little-endian…",N,N],[4,"Error",E,"The Error type.",N,N],[13,"Message",E,E,1,N],[13,"Io",E,E,1,N],[13,"DeserializeAnyNotSupported",E,E,1,N],[13,"InvalidBoolEncoding",E,E,1,N],[13,"InvalidChar",E,E,1,N],[13,"InvalidCharEncoding",E,E,1,N],[13,"InvalidEncapsulation",E,E,1,N],[13,"InvalidUtf8Encoding",E,E,1,N],[13,"NumberOutOfRange",E,E,1,N],[13,"SequenceMustHaveLength",E,E,1,N],[13,R[12],E,E,1,N],[13,"TypeNotSupported",E,E,1,N],[5,"calc_serialized_size",E,"Returns the size that an object would be if serialized…",N,[[[T]],["u64"]]],[5,"calc_serialized_size_bounded",E,R[11],N,[[[T],["u64"]],[[R[0],["u64"]],["u64"]]]],[5,"serialize",E,"Serializes a serializable object into a `Vec` of bytes…",N,[[[T],["s"]],[[R[0],["vec"]],["vec",["u8"]]]]],[5,"serialize_into",E,"Serializes an object directly into a `Write` with the…",N,[[["w"],[T],["s"]],[R[0]]]],[5,"deserialize",E,R[3],N,[[],[R[0]]]],[5,"deserialize_from",E,R[4],N,[[["s"],["r"]],[R[0]]]],[0,"de",E,"Deserializing CDR into Rust data types.",N,N],[3,R[1],R[56],R[2],N,N],[5,"deserialize_data",E,R[3],N,[[],[R[0]]]],[5,"deserialize_data_from",E,R[4],N,[[["s"],["r"]],[R[0]]]],[11,"new",E,E,2,[[["s"],["r"]],["self"]]],[0,"ser","cdr","Serializing Rust data types into CDR.",N,N],[3,R[5],R[20],R[6],N,N],[5,"serialize_data",E,"Serializes a serializable object into a `Vec` of bytes.",N,[[[T],["s"]],[[R[0],["vec"]],["vec",["u8"]]]]],[5,"serialize_data_into",E,"Serializes an object directly into a `Write`.",N,[[["w"],[T],["s"]],[R[0]]]],[11,"new",E,E,3,[[["w"]],["self"]]],[0,"size","cdr","Measuring the size of (de)serialized data.",N,N],[3,R[7],R[21],R[8],N,N],[12,"0",E,E,0,N],[3,R[9],E,R[10],N,N],[5,"calc_serialized_data_size",E,"Returns the size that an object would be if serialized.",N,[[[T]],["u64"]]],[5,"calc_serialized_data_size_bounded",E,R[11],N,[[[T],["u64"]],[[R[0],["u64"]],["u64"]]]],[8,R[12],E,R[13],N,N],[10,"add",E,E,4,[[["self"],["u64"]],[R[0]]]],[10,"limit",E,E,4,[[["self"]],[[R[26],["u64"]],["u64"]]]],[6,"Result","cdr","Convenient wrapper around `std::Result`.",N,N],[8,R[59],E,"Data encapsulation scheme identifiers.",N,N],[16,"E",E,E,5,N],[10,"id",E,E,5,[[]]],[11,R[26],E,E,5,[[]]],[8,R[12],E,R[13],N,N],[10,"add",E,E,4,[[["self"],["u64"]],[R[0]]]],[10,"limit",E,E,4,[[["self"]],[[R[26],["u64"]],["u64"]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[14],E,E,6,[[["self"]],[T]]],[11,R[15],E,E,6,[[["self"],[T]]]],[11,R[16],E,E,6,[[[U]],[R[0]]]],[11,R[17],E,E,6,[[],[R[0]]]],[11,R[22],E,E,6,[[["self"]],[T]]],[11,R[18],E,E,6,[[["self"]],[T]]],[11,R[19],E,E,6,[[["self"]],[R[23]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[14],E,E,7,[[["self"]],[T]]],[11,R[15],E,E,7,[[["self"],[T]]]],[11,R[16],E,E,7,[[[U]],[R[0]]]],[11,R[17],E,E,7,[[],[R[0]]]],[11,R[22],E,E,7,[[["self"]],[T]]],[11,R[18],E,E,7,[[["self"]],[T]]],[11,R[19],E,E,7,[[["self"]],[R[23]]]],[11,"into",R[56],E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[16],E,E,2,[[[U]],[R[0]]]],[11,R[17],E,E,2,[[],[R[0]]]],[11,R[22],E,E,2,[[["self"]],[T]]],[11,R[18],E,E,2,[[["self"]],[T]]],[11,R[19],E,E,2,[[["self"]],[R[23]]]],[11,"into",R[20],E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[16],E,E,3,[[[U]],[R[0]]]],[11,R[17],E,E,3,[[],[R[0]]]],[11,R[22],E,E,3,[[["self"]],[T]]],[11,R[18],E,E,3,[[["self"]],[T]]],[11,R[19],E,E,3,[[["self"]],[R[23]]]],[11,"into",R[21],E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[15],E,E,0,[[["self"],[T]]]],[11,R[16],E,E,0,[[[U]],[R[0]]]],[11,R[17],E,E,0,[[],[R[0]]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[18],E,E,0,[[["self"]],[T]]],[11,R[19],E,E,0,[[["self"]],[R[23]]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[14],E,E,8,[[["self"]],[T]]],[11,R[15],E,E,8,[[["self"],[T]]]],[11,R[16],E,E,8,[[[U]],[R[0]]]],[11,R[17],E,E,8,[[],[R[0]]]],[11,R[22],E,E,8,[[["self"]],[T]]],[11,R[18],E,E,8,[[["self"]],[T]]],[11,R[19],E,E,8,[[["self"]],[R[23]]]],[11,"into","cdr",E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[14],E,E,9,[[["self"]],[T]]],[11,R[15],E,E,9,[[["self"],[T]]]],[11,R[16],E,E,9,[[[U]],[R[0]]]],[11,R[17],E,E,9,[[],[R[0]]]],[11,R[22],E,E,9,[[["self"]],[T]]],[11,R[18],E,E,9,[[["self"]],[T]]],[11,R[19],E,E,9,[[["self"]],[R[23]]]],[11,"into",E,E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[14],E,E,10,[[["self"]],[T]]],[11,R[15],E,E,10,[[["self"],[T]]]],[11,R[16],E,E,10,[[[U]],[R[0]]]],[11,R[17],E,E,10,[[],[R[0]]]],[11,R[22],E,E,10,[[["self"]],[T]]],[11,R[18],E,E,10,[[["self"]],[T]]],[11,R[19],E,E,10,[[["self"]],[R[23]]]],[11,"into",E,E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[14],E,E,11,[[["self"]],[T]]],[11,R[15],E,E,11,[[["self"],[T]]]],[11,R[16],E,E,11,[[[U]],[R[0]]]],[11,R[17],E,E,11,[[],[R[0]]]],[11,R[22],E,E,11,[[["self"]],[T]]],[11,R[18],E,E,11,[[["self"]],[T]]],[11,R[19],E,E,11,[[["self"]],[R[23]]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[14],E,E,12,[[["self"]],[T]]],[11,R[15],E,E,12,[[["self"],[T]]]],[11,R[16],E,E,12,[[[U]],[R[0]]]],[11,R[17],E,E,12,[[],[R[0]]]],[11,R[22],E,E,12,[[["self"]],[T]]],[11,R[18],E,E,12,[[["self"]],[T]]],[11,R[19],E,E,12,[[["self"]],[R[23]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"to_string",E,E,1,[[["self"]],["string"]]],[11,R[16],E,E,1,[[[U]],[R[0]]]],[11,R[17],E,E,1,[[],[R[0]]]],[11,R[22],E,E,1,[[["self"]],[T]]],[11,R[18],E,E,1,[[["self"]],[T]]],[11,R[19],E,E,1,[[["self"]],[R[23]]]],[11,R[25],E,E,7,[[["self"],[R[28]]],[[R[24]],[R[26],[R[24]]]]]],[11,R[25],E,E,6,[[["self"],[R[27]]],[[R[24]],[R[26],[R[24]]]]]],[11,"default",E,E,6,[[],[R[27]]]],[11,"default",E,E,7,[[],[R[28]]]],[11,"hash",E,E,7,[[["self"],["__h"]]]],[11,"hash",E,E,6,[[["self"],["__h"]]]],[11,"clone",E,E,7,[[["self"]],[R[28]]]],[11,"clone",E,E,6,[[["self"]],[R[27]]]],[11,"fmt",E,E,6,[[[R[29]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",E,E,7,[[[R[29]],["self"]],[["error"],[R[0],["error"]]]]],[11,"cmp",E,E,6,[[["self"],[R[27]]],[R[24]]]],[11,"cmp",E,E,7,[[["self"],[R[28]]],[R[24]]]],[11,R[30],E,E,7,[[],["u16"]]],[11,R[31],E,E,7,[[],["u32"]]],[11,R[32],E,E,7,[[],["u64"]]],[11,R[33],E,E,7,[[],["u128"]]],[11,R[34],E,E,7,[[["usize"]],["u64"]]],[11,R[35],E,E,7,[[["usize"]],["u128"]]],[11,R[36],E,E,7,[[["u16"]]]],[11,R[37],E,E,7,[[["u32"]]]],[11,R[38],E,E,7,[[["u64"]]]],[11,R[39],E,E,7,[[["u128"]]]],[11,R[40],E,E,7,[[["usize"],["u64"]]]],[11,R[41],E,E,7,[[["usize"],["u128"]]]],[11,R[42],E,E,7,[[]]],[11,R[43],E,E,7,[[]]],[11,R[44],E,E,7,[[]]],[11,R[45],E,E,7,[[]]],[11,R[46],E,E,7,[[]]],[11,R[47],E,E,7,[[]]],[11,R[48],E,E,7,[[]]],[11,R[49],E,E,7,[[]]],[11,R[50],E,E,7,[[]]],[11,R[51],E,E,7,[[]]],[11,R[52],E,E,7,[[]]],[11,R[53],E,E,7,[[]]],[11,R[54],E,E,7,[[]]],[11,R[55],E,E,7,[[]]],[11,R[30],E,E,6,[[],["u16"]]],[11,R[31],E,E,6,[[],["u32"]]],[11,R[32],E,E,6,[[],["u64"]]],[11,R[33],E,E,6,[[],["u128"]]],[11,R[34],E,E,6,[[["usize"]],["u64"]]],[11,R[35],E,E,6,[[["usize"]],["u128"]]],[11,R[36],E,E,6,[[["u16"]]]],[11,R[37],E,E,6,[[["u32"]]]],[11,R[38],E,E,6,[[["u64"]]]],[11,R[39],E,E,6,[[["u128"]]]],[11,R[40],E,E,6,[[["usize"],["u64"]]]],[11,R[41],E,E,6,[[["usize"],["u128"]]]],[11,R[42],E,E,6,[[]]],[11,R[43],E,E,6,[[]]],[11,R[44],E,E,6,[[]]],[11,R[45],E,E,6,[[]]],[11,R[46],E,E,6,[[]]],[11,R[47],E,E,6,[[]]],[11,R[48],E,E,6,[[]]],[11,R[49],E,E,6,[[]]],[11,R[50],E,E,6,[[]]],[11,R[51],E,E,6,[[]]],[11,R[52],E,E,6,[[]]],[11,R[53],E,E,6,[[]]],[11,R[54],E,E,6,[[]]],[11,R[55],E,E,6,[[]]],[11,"eq",E,E,7,[[["self"],[R[28]]],["bool"]]],[11,"eq",E,E,6,[[["self"],[R[27]]],["bool"]]],[11,"id",E,E,9,[[]]],[11,"id",E,E,10,[[]]],[11,"id",E,E,11,[[]]],[11,"id",E,E,12,[[]]],[11,"add",R[21],E,0,[[["self"],["u64"]],[R[0]]]],[11,"limit",E,E,0,[[["self"]],[[R[26],["u64"]],["u64"]]]],[11,"add",E,E,8,[[["self"],["u64"]],[R[0]]]],[11,"limit",E,E,8,[[["self"]],[[R[26],["u64"]],["u64"]]]],[11,"from",R[56],E,2,[[["deserializer",[R[27]]],[R[27]]],["self"]]],[11,"from","cdr",E,1,[[["error"]],["self"]]],[11,"clone",E,E,9,[[["self"]],["cdrbe"]]],[11,"clone",E,E,10,[[["self"]],["cdrle"]]],[11,"clone",E,E,11,[[["self"]],["plcdrbe"]]],[11,"clone",E,E,12,[[["self"]],["plcdrle"]]],[11,"clone",R[21],E,0,[[["self"]],[R[57]]]],[11,"clone",E,E,8,[[["self"]],[R[58]]]],[11,"eq","cdr",E,9,[[["cdrbe"],["self"]],["bool"]]],[11,"eq",E,E,10,[[["self"],["cdrle"]],["bool"]]],[11,"eq",E,E,11,[[["self"],["plcdrbe"]],["bool"]]],[11,"eq",E,E,12,[[["self"],["plcdrle"]],["bool"]]],[11,"eq",R[21],E,0,[[[R[57]],["self"]],["bool"]]],[11,"ne",E,E,0,[[[R[57]],["self"]],["bool"]]],[11,"eq",E,E,8,[[[R[58]],["self"]],["bool"]]],[11,"fmt","cdr",E,1,[[[R[29]],["self"]],[R[0]]]],[11,"fmt",E,E,9,[[[R[29]],["self"]],[R[0]]]],[11,"fmt",E,E,10,[[[R[29]],["self"]],[R[0]]]],[11,"fmt",E,E,11,[[[R[29]],["self"]],[R[0]]]],[11,"fmt",E,E,12,[[[R[29]],["self"]],[R[0]]]],[11,"fmt",E,E,1,[[[R[29]],["self"]],[R[0]]]],[11,"fmt",R[21],E,0,[[[R[29]],["self"]],[R[0]]]],[11,"fmt",E,E,8,[[[R[29]],["self"]],[R[0]]]],[11,"hash","cdr",E,9,[[["self"],["__h"]]]],[11,"hash",E,E,10,[[["self"],["__h"]]]],[11,"hash",E,E,11,[[["self"],["__h"]]]],[11,"hash",E,E,12,[[["self"],["__h"]]]],[11,"hash",R[21],E,0,[[["self"],["__h"]]]],[11,"hash",E,E,8,[[["self"],["__h"]]]],[11,"description","cdr",E,1,[[["self"]],["str"]]],[11,"cause",E,E,1,[[["self"]],[[R[26],["error"]],["error"]]]],[11,"custom",E,E,1,[[[T]],["self"]]],[11,"custom",E,E,1,[[[T]],["self"]]],[11,R[26],E,E,5,[[]]]],"p":[[3,R[7]],[4,"Error"],[3,R[1]],[3,R[5]],[8,R[12]],[8,R[59]],[4,R[60]],[4,R[61]],[3,R[9]],[4,"CdrBe"],[4,"CdrLe"],[4,"PlCdrBe"],[4,"PlCdrLe"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);